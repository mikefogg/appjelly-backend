envVarGroups:
  - name: appjelly-shared-env
    envVars:
      # Database & Infrastructure
      - key: NODE_ENV
        value: production
      - key: USE_DB_SSL
        value: true
      - key: MAX_DB_POOL_SIZE
        value: 10
      - key: DATABASE_URL
        fromDatabase:
          name: appjelly-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: appjelly-redis
          property: connectionString
      
      # Worker Configuration
      - key: CONTENT_WORKERS
        value: 2
      - key: CONTENT_CONCURRENCY
        value: 2
      - key: MEDIA_WORKERS
        value: 2
      - key: MEDIA_CONCURRENCY
        value: 2
      - key: CLEANUP_WORKER_CONCURRENCY
        value: 2
      - key: KEEP_FAILED_JOBS_COUNT
        value: 10
      
      # AI Configuration
      - key: OPENAI_MODEL
        value: gpt-4o-mini
      - key: BYPASS_AI
        value: false
      
      # Sensitive variables (set manually in Render dashboard)
      - key: CORS_ORIGIN
        sync: false
      - key: CLERK_SECRET_KEY
        sync: false
      - key: CLERK_PUBLISHABLE_KEY
        sync: false
      - key: CLERK_WEBHOOK_SECRET
        sync: false
      - key: OPENAI_API_KEY
        sync: false
      - key: CLOUDFLARE_ACCOUNT_ID
        sync: false
      - key: CLOUDFLARE_ACCOUNT_HASH
        sync: false
      - key: CLOUDFLARE_API_TOKEN
        sync: false
      - key: CLOUDFLARE_IMAGES_SIGNING_KEY
        sync: false
      - key: REVENUECAT_API_KEY
        sync: false
      - key: REVENUECAT_WEBHOOK_SECRET
        sync: false
      - key: MEDIA_WEBHOOK_SECRET
        sync: false
      - key: CONTENT_SAFETY_WEBHOOK_SECRET
        sync: false
      - key: SHARE_BASE_URL
        sync: false
      - key: SHORT_URL_BASE
        sync: false

services:
  # AppJelly Platform API - Multi-tenant backend for all apps
  - type: web
    name: appjelly-api
    runtime: node
    plan: starter
    buildCommand: npm install && npm run knex migrate:latest
    startCommand: npm start
    healthCheckPath: /health
    autoDeploy: true
    customDomains:
      - name: api.appjelly.io
    scaling:
      minInstances: 1
      maxInstances: 3
      targetMemoryPercent: 70
      targetCPUPercent: 70
    envVars:
      - fromGroup: appjelly-shared-env

  # Content Generation Worker - Handles AI content creation for all apps
  - type: worker
    name: appjelly-content-worker
    runtime: node
    plan: starter
    buildCommand: npm install
    startCommand: npm run global-worker
    autoDeploy: true
    envVars:
      - fromGroup: appjelly-shared-env

  # Media Processing Worker - Handles image/media processing for all apps
  - type: worker
    name: appjelly-media-worker
    runtime: node
    plan: starter
    buildCommand: npm install
    startCommand: npm run media-worker
    autoDeploy: true
    envVars:
      - fromGroup: appjelly-shared-env

  # Cleanup Worker - Handles data cleanup and maintenance for all apps
  - type: worker
    name: appjelly-cleanup-worker
    runtime: node
    plan: starter
    buildCommand: npm install
    startCommand: npm run cleanup-worker
    autoDeploy: true
    envVars:
      - fromGroup: appjelly-shared-env

databases:
  - name: appjelly-db
    databaseName: appjelly
    user: appjelly
    plan: free

  - name: appjelly-redis
    plan: free 