#!/usr/bin/env node

/**
 * Clean up all test data generated by generate-test-families.js
 * 
 * Usage:
 *   dev node tasks/cleanup-test-data.js
 */

import { Account, Actor, AccountLink, Media } from "#src/models/index.js";

console.log("🧹 Cleaning up test data...");

try {
  // Find all test accounts
  const testAccounts = await Account.query()
    .where("metadata:is_test_data", true);

  if (testAccounts.length === 0) {
    console.log("✅ No test data found to clean up");
    process.exit(0);
  }

  const accountIds = testAccounts.map(acc => acc.id);

  console.log(`📊 Found ${testAccounts.length} test accounts:`);
  testAccounts.forEach(acc => {
    console.log(`  - ${acc.email} (${acc.metadata?.display_name})`);
  });

  // Delete in correct order due to foreign key constraints
  console.log("\n🗑️ Deleting test data...");

  // 1. Delete account links
  const deletedLinks = await AccountLink.query()
    .where("metadata:is_test_data", true)
    .delete();
  console.log(`  ✅ Deleted ${deletedLinks} account links`);

  // 2. Delete media
  const deletedMedia = await Media.query()
    .whereIn("owner_id", accountIds)
    .where("owner_type", "actor")
    .delete();
  console.log(`  ✅ Deleted ${deletedMedia} media items`);

  // 3. Delete actors
  const deletedActors = await Actor.query()
    .whereIn("account_id", accountIds)
    .delete();
  console.log(`  ✅ Deleted ${deletedActors} actors`);

  // 4. Delete accounts
  const deletedAccounts = await Account.query()
    .whereIn("id", accountIds)
    .delete();
  console.log(`  ✅ Deleted ${deletedAccounts} accounts`);

  console.log(`\n🎉 Successfully cleaned up all test data!`);
  console.log(`📈 Summary: ${deletedAccounts} accounts, ${deletedActors} actors, ${deletedLinks} links, ${deletedMedia} media`);

} catch (error) {
  console.error("❌ Failed to clean up test data:", error);
  process.exit(1);
}